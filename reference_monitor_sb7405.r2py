"""
This is a security layer of a reference monitor. It creates a backup copy of a file for retention in case it is written incorrectly. 
Both the backup and written to file are validated for starting ('S') and ending ('E') characters when closing.
If valid - backup copy is overwritten, otherwise both copies are retained in their last known state.

Created by: sb7405

Note:
    This security layer uses encasementlib.r2py, restrictions.default, repy.py and Python
    Also you need to give it an application to run.
    python repy.py restrictions.default encasementlib.r2py [security_layer].r2py [attack_program].r2py 
    
""" 
TYPE="type"
ARGS="args"
RETURN="return"
EXCP="exceptions"
TARGET="target"
FUNC="func"
OBJC="objc"


class ABFile():
  def __init__(self,filename,create):

    # validate that selected filename contains only lowercase letters and numbers
    # check for '.' to make sure it's present only as extension separator or not at all
    if (filename.count('.') < 2):
      list = filename.split('.')
      if(list[0].isalnum() and list[0].islower()):
      
        # globals
        mycontext['debug'] = False   
        # local (per object) reference to the underlying file
        self.Afn = filename+'.a'
        self.Bfn = filename+'.b'

        # make the files and add 'SE' to the readat file...
        if create:
          self.Afile = openfile(self.Afn,create)
          self.Bfile = openfile(self.Bfn,create)
          self.Afile.writeat('SE',0)

        # otherwise open existing files
        else:
          self.Afile = openfile(self.Afn,False)
          self.Bfile = openfile(self.Bfn,False)


  def writeat(self,data,offset):
    # Write the requested data to the B file using the sandbox's writeat call
    self.Bfile.writeat(data,offset)
  
  def readat(self,bytes,offset):
    # Read from the A file using the sandbox's readat...
    return self.Afile.readat(bytes,offset)

  def close(self):
    # Replace A's content with B if both files are valid and close both files 
    if(file_valid(self.Afile) and file_valid(self.Bfile)):
      new_copy = self.Bfile.readat(None,0)
      self.Afile.writeat(new_copy,0)
    self.Afile.close()
    self.Bfile.close()

def file_valid(file):
# Checks validity of a file
  content = file.readat(None,0)
  if (content[0] == 'S') and (content[-1] == 'E'):
    return True
  else:
    return False

def ABopenfile(filename, create):
  return ABFile(filename,create)




# The code here sets up type checking and variable hiding for you.  You
# should not need to change anything below here.
sec_file_def = {"obj-type":ABFile,
                "name":"ABFile",
                "writeat":{"type":"func","args":(str,(int,long)),"exceptions":Exception,"return":(int,type(None)),"target":ABFile.writeat},
                "readat":{"type":"func","args":((int,long,type(None)),(int,long)),"exceptions":Exception,"return":str,"target":ABFile.readat},
                "close":{"type":"func","args":None,"exceptions":None,"return":(bool,type(None)),"target":ABFile.close}
           }

CHILD_CONTEXT_DEF["ABopenfile"] = {TYPE:OBJC,ARGS:(str,bool),EXCP:Exception,RETURN:sec_file_def,TARGET:ABopenfile}

# Execute the user code
secure_dispatch_module()