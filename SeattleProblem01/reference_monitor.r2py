"""
This security layer inadequately handles A/B storage for files in RepyV2.


==================================================================================================================================

The Reference Monitor Must:

	1. Not modify or disable any functionality of any RepyV2 API calls, such as:
		a. Creating new files
		b. Opening an existing file
		c. Reading valid backup using readat()
		d. Writing to file using writeat(). This includes invalid writes, because 'S' and 'E' 
		may later be written to the begining and end of the file respectively.
	2. Check if file contents starts with 'S' and ends with 'E', only when close() is called.
	3. Update the original file with the new data IF the new data is valid on close().
	4. Not produce any errors
		a. Normal operations should not be blocked or produce any output
		b. Invalid operations should not produce any output to the user

The Reference Monitor Should:

	1. Create two copies of the same file (filename.a and filename.b)
	2. One is a valid backup to read from, and the other is written to
	3. When an app calls ABopenfile(), the method opens the A/B files, which you should name filename.a and filename.b.
	4. When the app calls readat(), all reads must be performed on the valid backup.
	5. When the app calls writeat(), all writes must be performed on the written to file.


RepyV2 references:

APIS
	1. openfile() -> https://github.com/SeattleTestbed/docs/blob/master/Programming/RepyV2API.md#file-functions
	2. createlock() -> https://github.com/SeattleTestbed/docs/blob/master/Programming/RepyV2API.md#createlock
	3. file.readat() -> https://github.com/SeattleTestbed/docs/blob/master/Programming/RepyV2API.md#filereadatsizelimit-offset
	4. file.writeat() -> https://github.com/SeattleTestbed/docs/blob/master/Programming/RepyV2API.md#filewriteatdata-offset

OTHERS
	3. mycontext[] -> https://github.com/SeattleTestbed/docs/blob/master/Programming/RepyV2API.md#mycontext

==================================================================================================================================

Note:
    This security layer uses encasementlib.r2py, restrictions.default, repy.py and Python
    Also you need to give it an application to run.
    python repy.py restrictions.default encasementlib.r2py [security_layer].r2py [attack_program].r2py 


"""

TYPE="type"
ARGS="args"
RETURN="return"
EXCP="exceptions"
TARGET="target"
FUNC="func"
OBJC="objc"


class ABFile():
  def __init__(self,filename,create):
    # globals
    mycontext['debug'] = False

    # local (per object) reference to the underlying file
    self.Afn = filename+'.a'
    self.Bfn = filename+'.b'

    # when creating a new file
    if create:
			self.Bfile = openfile(self.Bfn,create)  # see references
			
			if self.Afn in listfiles():					    # If 'a' file is available
				self.Afile = openfile(self.Afn,False)	# Open the 'a' file

			else:
				self.Afile = openfile(self.Afn,create)	# Create new file
				self.Afile.writeat('SE',0)          	  # And write "SE" at the beginning

		# when updating existing file
    else:
			self.Bfile = openfile(self.Bfn, True)			# create and open the 'b' file
			self.Afile = openfile(self.Afn, False)		# open the 'a' file as it is already present
      
    mycontext['Lock']= createlock()						# see references

  def writeat(self,data,offset):
    """
		Get the lock, write to the file and release the lock
		"""

    mycontext['Lock'].acquire(True)
    try:
			self.Bfile.writeat(data,offset)
			mycontext['Lock'].release()
    except:					
			mycontext['Lock'].release()
    return

  def readat(self,bytes,offset):
    """
		Get the lock, read from the file, release the lock and return the data
		"""

    mycontext['Lock'].acquire(True)
    try:
			read = self.Afile.readat(bytes,offset)
			mycontext['Lock'].release()
			return read
    except:
			mycontext['Lock'].release()
    return ""


  def close(self):
    """
		Check if file contents starts with 'S' and ends with 'E'. Update 
		the original file with the new data IF the new data is valid.
		"""
    
    backup = self.Afile.readat(None,0)
    data = self.Bfile.readat(None,0)
    backup_file_name = self.Afn

    if self.Bfile.readat(None,0).startswith("S") and self.Bfile.readat(None,0).endswith("E"):
		  self.Afile.close()
		  self.Bfile.close()
		  removefile(self.Afn)
		  openfile(backup_file_name,True).writeat(data,0)
		  removefile(self.Bfn)

    else:
			self.Afile.close()
			self.Bfile.close()
			removefile(self.Afn)
			openfile(backup_file_name,True).writeat(backup,0)
			removefile(self.Bfn)

    

def ABopenfile(filename, create):
  return ABFile(filename,create)


# The code here sets up type checking and variable hiding for you.  You
# should not need to change anything below here.
sec_file_def = {"obj-type":ABFile,
                "name":"ABFile",
                "writeat":{"type":"func","args":(str,(int,long)),"exceptions":Exception,"return":(int,type(None)),"target":ABFile.writeat},
                "readat":{"type":"func","args":((int,long,type(None)),(int,long)),"exceptions":Exception,"return":str,"target":ABFile.readat},
                "close":{"type":"func","args":None,"exceptions":None,"return":(bool,type(None)),"target":ABFile.close}
}

CHILD_CONTEXT_DEF["ABopenfile"] = {TYPE:OBJC,ARGS:(str,bool),EXCP:Exception,RETURN:sec_file_def,TARGET:ABopenfile}

# Execute the user code
secure_dispatch_module()