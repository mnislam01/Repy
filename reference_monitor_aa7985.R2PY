TYPE="type"
ARGS="args"
RETURN="return"
EXCP="exceptions"
TARGET="target"
FUNC="func"
OBJC="objc"

class ABFile():
  def __init__(self,filename,create):
    # globals
    mycontext['debug'] = False   
    # local (per object) reference to the underlying file
    self.Afn = filename+'.a'
    self.Bfn = filename+'.b'

    # make the files and add 'SE' to the readat file...
    if create:
      
      self.Afile = openfile(self.Afn,create)
      self.Bfile = openfile(self.Bfn,create)
      self.Afile.writeat('SE',0)



  def writeat(self,data,offset):
    
    # Write the requested data to the B file using the sandbox's writeat call
    
    self.Bfile.writeat(data,offset)
    
    
    
  def readat(self,bytes,offset):
    # Read from the A file using the sandbox's readat...
      return self.Afile.readat(bytes,offset)        
        
      #self.Bfile.close()  
      #log(first) 
      #self.Bfile.close()
      #self.Afile.close()
      #removefile(self.Bfn)
      #first = arr
      #log(self.Afile.readat(bytes,offset))
      return read
      #return self.Afile.readat(bytes,offset)
 
     
      

  def close(self):
    arr = []
    #log("Hello") 
    #self.Bfile.close()
    #log("B closed after writing")
    #self.Bfile = openfile(self.Bfn,True)
    #log("B opened after again")
    read = self.Bfile.readat(None,0) 
    arr = list(read)
    
    
    #log(read)
    #log(arr)
    Len = len(arr)
    #log("Hi")
    #log(Len)
    try:
      if(arr[-1]=='E' and arr[0]=='S'):
        #log("Pass")
        self.Afile.close()
        #log("A file closed%%%%")
        removefile(self.Afn)
        #log("A file removed%%%%")
        self.Afile = openfile(self.Afn, True)
        #log(read)
        self.Afile.writeat(read,0)
    
    except:
     #log("in except block after try***")
     self.Bfile.close()   
     
    #log("Closing files")
    self.Afile.close()
    #log("Closed A")
    try:
     self.Bfile.close()
     removefile(self.Bfn)
    except:
     #log("Error: B already Closed")
     removefile(self.Bfn)

def ABopenfile(filename, create):
  return ABFile(filename,create)




# The code here sets up type checking and variable hiding for you.  You
# should not need to change anything below here.
sec_file_def = {"obj-type":ABFile,
                "name":"ABFile",
                "writeat":{"type":"func","args":(str,(int,long)),"exceptions":Exception,"return":(int,type(None)),"target":ABFile.writeat},
                "readat":{"type":"func","args":((int,long,type(None)),(int,long)),"exceptions":Exception,"return":str,"target":ABFile.readat},
                "close":{"type":"func","args":None,"exceptions":None,"return":(bool,type(None)),"target":ABFile.close}
           }

CHILD_CONTEXT_DEF["ABopenfile"] = {TYPE:OBJC,ARGS:(str,bool),EXCP:Exception,RETURN:sec_file_def,TARGET:ABopenfile}

# Execute the user code
secure_dispatch_module()

